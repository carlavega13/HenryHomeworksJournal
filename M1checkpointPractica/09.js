const { BinarySearchTree } = require("../DS");
// ‚ö†Ô∏è NO MODIFICAR NADA POR ENCIMA DE ESTA L√çNEA ‚ö†Ô∏è
//
// 9Ô∏è‚É£ ***** EJERCICIO 9 ***** - BinarySearchTree.getHouseValues() 9Ô∏è‚É£
// Agregar al prototype de BinarySearchTree la funci√≥n getHouseValues(), que servir√° para obtener el valor total de una casa
// dependiendo del par√°metro que recibas.
// Si recibes el par√°metro "left", debes retornar la suma de todos los valores que est√©n a la izquierda del √°rbol.
// Si recibes el par√°metro "right", debes retornar la suma de todos los valores que est√©n a la derecha.
// EJEMPLOS:
// Dado el siguiente √°rbol:
//                13
//             /      \
//           7         24
//         /          /   \
//        6         16     27
//      /                    \
//     3                     45
//      \
//       4
// BinarySearchTree.getHouseValues("left") Devuelve => 16
// BinarySearchTree.getHouseValues("right") Devuelve => 96
// REQUISITOS:
//  üü¢ La funci√≥n debe retornar un numero representando la suma total de las ramas, dependiendo del orden pedido
//  üü¢ El valor del nodo ra√≠z no debe ser incluido

BinarySearchTree.prototype.getHouseValues = function (side, total = 0) {
  // Tu c√≥digo aqu√≠:
  switch (side) {
    case "left":
      let aux = this.left;
      let contador = 0;
      console.log(aux.value);
      while (aux) {
        console.log(aux);
        contador += aux.value;
        aux = aux.left;
      }
      return contador;

    case "right":
      let aux1 = this.right;
      let contador1 = 0;
      while (aux1) {
        contador1 += aux1.value;
        aux1 = aux1.right;
      }
      return contador1;

    default:
      return false;
  }
};

// ‚ö†Ô∏è NO MODIFICAR NADA POR DEBAJO DE ESTA L√çNEA ‚ö†Ô∏è
module.exports = {
  BinarySearchTree,
};
